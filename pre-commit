#! /bin/bash
#
# This script checks if all staged php files are valid against the Fork coding standards
# and if there are no javascript errors
# dependencies:
# 	codesniffer (http://pear.php.net/package/PHP_CodeSniffer/redirected)
# 	Fork coding standards in ~/.phpcs/Fork (https://github.com/WouterSioen/dotfiles)
# 	esvalidate (https://github.com/duereg/esvalidate)
# 	CSS lint (https://github.com/stubbornella/csslint/wiki/Command-line-interface)
#
# @version	1.0.0
# @author	Wouter Sioen <wouter.sioen@wijs.be>

# create empty errors array
declare -a errors

# Check if we're on a semi-secret empty tree
if git rev-parse --verify HEAD
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# fetch all changed php files and validate them
files=$(git diff-index --name-only --diff-filter=ACMR $against | grep '\.php$')
for file in $files; do

	# first check if they are valid php files
	output=`php -l $file | grep 'Errors parsing'`

	# if it did contain errors, we have output
	if [ -n "$output" ]; then
		echo "$file contains php syntax errors"
		errors=("${errors[@]}" "$output")
	fi

	# checks if the phpcs output contains '(0 errors, 0 warnings)'
	output=`phpcs --standard="$HOME/.phpcs/Fork" --report=full $file | grep '| ERROR |'`

	# if it did contain errors, we have output
	if [ -n "$output" ]; then
		echo "$file fails coding standards"
		phpcs --standard="$HOME/.phpcs/Fork" --report=full $file
		errors=("${errors[@]}" "$output")
	fi
done

# fetch all changed js files and validate them
files=$(git diff-index --name-only --diff-filter=ACMR $against | grep '\.js$')
for file in $files; do
	output=`esvalidate $file`

	# if our output is not empty, there were errors
	if [ -n "$output" ]; then
		echo "$file contains javascript syntax errors"
		echo $output
		errors=("${errors[@]}" "$output")
	fi
done

# fetch all changed css files and validate them
files=$(git diff-index --name-only --diff-filter=ACMR $against | grep '\.css$')
for file in $files; do
	output=`csslint $file | grep ': error'`

	# if our output is not empty, there were errors
	if [ -n "$output" ]; then
		echo "$file contains css syntax errors"
		echo $output
		errors=("${errors[@]}" "$output")
	fi
done

# if we have errors, exit with 1
if [ -n "$errors" ]; then
	exit 1
fi